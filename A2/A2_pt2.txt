create_deck <- function(num = 1) {  deck <- expand.grid(values = c(2:10, "A", "Q", "K", "J"), suits = c("S", "C", "D", "H"), stringsAsFactors = FALSE)  single <- deck  if (num > 1) {    for (i in 1:(num - 1)) {      deck <- rbind(deck, single)    }  }  deck$lookup <- paste0(deck$values, deck$suits)  deck$point <- suppressWarnings(ifelse(!is.na(as.integer(as.character(deck$values))), as.integer(as.character(deck$values)),                                        ifelse(deck$values %in% c("Q", "K", "J"), 10, 1)  ))    return(deck)}

Rprof()res1 = create_deck(1000)Rprof(NULL)summaryRprof()system.time(create_deck(1000))

$by.self
                  self.time self.pct total.time total.pct
"rbind"                0.78    61.90       1.24     98.41
"structure"            0.22    17.46       0.22     17.46
"Make.row.names"       0.14    11.11       0.14     11.11
"<Anonymous>"          0.02     1.59       0.02      1.59
"any"                  0.02     1.59       0.02      1.59
"is.factor"            0.02     1.59       0.02      1.59
"lazyLoadDBfetch"      0.02     1.59       0.02      1.59
"levels"               0.02     1.59       0.02      1.59
"seq.int"              0.02     1.59       0.02      1.59

$by.total
                       total.time total.pct self.time self.pct
"create_deck"                1.26    100.00      0.00     0.00
"rbind"                      1.24     98.41      0.78    61.90
"structure"                  0.22     17.46      0.22    17.46
"Make.row.names"             0.14     11.11      0.14    11.11
"<Anonymous>"                0.02      1.59      0.02     1.59
"any"                        0.02      1.59      0.02     1.59
"is.factor"                  0.02      1.59      0.02     1.59
"lazyLoadDBfetch"            0.02      1.59      0.02     1.59
"levels"                     0.02      1.59      0.02     1.59
"seq.int"                    0.02      1.59      0.02     1.59
"[[.data.frame"              0.02      1.59      0.00     0.00
"[["                         0.02      1.59      0.00     0.00
"%in%"                       0.02      1.59      0.00     0.00
"cmp"                        0.02      1.59      0.00     0.00
"cmpCall"                    0.02      1.59      0.00     0.00
"cmpfun"                     0.02      1.59      0.00     0.00
"cmpSymbolAssign"            0.02      1.59      0.00     0.00
"compiler:::tryCmpfun"       0.02      1.59      0.00     0.00
"constantFold"               0.02      1.59      0.00     0.00
"constantFoldSym"            0.02      1.59      0.00     0.00
"doTryCatch"                 0.02      1.59      0.00     0.00
"genCode"                    0.02      1.59      0.00     0.00
"h"                          0.02      1.59      0.00     0.00
"tryCatch"                   0.02      1.59      0.00     0.00
"tryCatchList"               0.02      1.59      0.00     0.00
"tryCatchOne"                0.02      1.59      0.00     0.00
"tryInline"                  0.02      1.59      0.00     0.00

$sample.interval
[1] 0.02

$sampling.time
[1] 1.26

   user  system elapsed 
  1.018   0.004   1.030 
